package com.shailu.eteasytake;import android.app.ProgressDialog;import android.content.Intent;import android.os.Bundle;import android.text.TextUtils;import android.view.View;import android.widget.Button;import android.widget.EditText;import android.widget.Toast;import androidx.annotation.DrawableRes;import androidx.annotation.NonNull;import androidx.appcompat.app.AppCompatActivity;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.android.material.textfield.TextInputEditText;import com.google.android.material.textfield.TextInputLayout;import com.google.firebase.FirebaseException;import com.google.firebase.auth.AuthResult;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseAuthInvalidCredentialsException;import com.google.firebase.auth.PhoneAuthCredential;import com.google.firebase.auth.PhoneAuthProvider;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.roger.catloadinglibrary.CatLoadingView;import com.shailu.eteasytake.R;import java.util.HashMap;import java.util.concurrent.TimeUnit;public class join_now_Activity extends AppCompatActivity{    CatLoadingView loadingbar;    private Button createaccountbutton;    private TextInputEditText inputphoneno,input_otp,inputname,inputpass;    private TextInputLayout layout,lay_name,lay_pass,lay_phone;    private Button send_otp;    FirebaseAuth mAuth;    String codesent;    @Override    protected void onCreate(Bundle savedInstanceState)    {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_join_now_);        initialize();        send_otp.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                sendvarificationcode();            }        });        createaccountbutton.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View v)            {                verifiSingincode();            }        });    }    private void initialize()    {        createaccountbutton = (Button)findViewById(R.id.join_now_btn);        inputname = (TextInputEditText)findViewById(R.id.join_now_username_input1);        inputpass = (TextInputEditText)findViewById(R.id.join_now_password_input1);        loadingbar = new CatLoadingView();        inputphoneno = (TextInputEditText) findViewById(R.id.join_now_phoneno_input);        lay_phone=(TextInputLayout)findViewById(R.id.join_now_phoneno_input1);        input_otp=(TextInputEditText)findViewById(R.id.User_Verification_No);        layout=(TextInputLayout)findViewById(R.id.User_Verification_No1);        lay_name=(TextInputLayout)findViewById(R.id.join_now_username_input);        lay_pass=(TextInputLayout)findViewById(R.id.join_now_password_input);        send_otp=(Button)findViewById(R.id.send_otp_btn);        mAuth=FirebaseAuth.getInstance();    }    private void verifiSingincode()    {        String name = inputname.getText().toString();        String phone = inputphoneno.getText().toString();        String pass = inputpass.getText().toString();        String code=input_otp.getText().toString();        if(code.isEmpty())        {            input_otp.setError("Enter Otp");            input_otp.requestFocus();        }       else if (TextUtils.isEmpty(name))        {            inputname.setError("Write Your Name...");            inputname.requestFocus();        }       else if (TextUtils.isEmpty(phone))        {            inputphoneno.setError("Write Your Phone...");            inputphoneno.requestFocus();        }        else if (inputpass.getText().toString().length()<4)        {            inputpass.setError("Password must greater than 4digit...");            inputpass.requestFocus();        }       else if (TextUtils.isEmpty(pass))        {            inputpass.setError("Write Your Password...");            inputpass.requestFocus();        }        else        {            loadingbar.show(getSupportFragmentManager(), "");            loadingbar.setCanceledOnTouchOutside(false);//            loadingbar.setTitle("Create Account");//            loadingbar.setMessage("please Wait...");//            loadingbar.show();            PhoneAuthCredential credential = PhoneAuthProvider.getCredential(codesent, code);            signInWithPhoneAuthCredential(credential);        }    }    private void signInWithPhoneAuthCredential(PhoneAuthCredential credential)    {        mAuth.signInWithCredential(credential)        .addOnCompleteListener(this, new OnCompleteListener<AuthResult>()        {        @Override        public void onComplete(@NonNull Task<AuthResult> task)        {        if (task.isSuccessful())        {            createaccount();            Toast.makeText(join_now_Activity.this, "OTP verify Successful..", Toast.LENGTH_LONG).show();        }        else if(task.getException() instanceof FirebaseAuthInvalidCredentialsException)        {            Toast.makeText(join_now_Activity.this, "Enter Valid OTP...", Toast.LENGTH_LONG).show();            loadingbar.dismiss();        }        }        });    }    private void sendvarificationcode()    {        String phone=inputphoneno.getText().toString();        if (phone.isEmpty())        {            inputphoneno.setError("Enter Mobile No.");            inputphoneno.requestFocus();            return;        }        if(phone.length()<10)        {            inputphoneno.setError("Ener Valid Mo No");            inputphoneno.requestFocus();            return;        }        loadingbar.show(getSupportFragmentManager(), "");        loadingbar.setCanceledOnTouchOutside(false);//        loadingbar.setTitle("Sending OTP");//        loadingbar.setMessage("please Wait...");//        loadingbar.setCanceledOnTouchOutside(false);//        loadingbar.show();        String MONO="+91"+phone;        PhoneAuthProvider.getInstance().verifyPhoneNumber(                MONO,        // Phone number to verify                60,                 // Timeout duration                TimeUnit.SECONDS,   // Unit of timeout                this,               // Activity (for callback binding)                mCallbacks);        // OnVerificationStateChangedCallbacks    }    PhoneAuthProvider.OnVerificationStateChangedCallbacks mCallbacks=new PhoneAuthProvider.OnVerificationStateChangedCallbacks()    {        @Override        public void onVerificationCompleted(PhoneAuthCredential phoneAuthCredential)        {        }        @Override        public void onVerificationFailed(FirebaseException e)        {            String message=e.getMessage();            Toast.makeText(join_now_Activity.this, "VARIFICATION FAILED :"+message, Toast.LENGTH_SHORT).show();            loadingbar.dismiss();        }        @Override        public void onCodeSent(String s, PhoneAuthProvider.ForceResendingToken forceResendingToken)        {            super.onCodeSent(s, forceResendingToken);            loadingbar.dismiss();            Toast.makeText(join_now_Activity.this, "OTP sent", Toast.LENGTH_LONG).show();            inputphoneno.setEnabled(false);            lay_phone.setEnabled(false);            codesent=s;            send_otp.setVisibility(View.INVISIBLE);            input_otp.setVisibility(View.VISIBLE);            layout.setVisibility(View.VISIBLE);            lay_name.setVisibility(View.VISIBLE);            lay_pass.setVisibility(View.VISIBLE);            inputname.setVisibility(View.VISIBLE);            inputpass.setVisibility(View.VISIBLE);            createaccountbutton.setVisibility(View.VISIBLE);        }    };    private void createaccount()    {        String name = inputname.getText().toString();        String phone = inputphoneno.getText().toString();        String pass = inputpass.getText().toString();        String code=input_otp.getText().toString();        if(code.isEmpty())        {            input_otp.setError("Enter Otp");            input_otp.requestFocus();        }       else if (TextUtils.isEmpty(name))        {            inputname.setError("Write Your Name...");            inputname.requestFocus();        }        else if (TextUtils.isEmpty(phone))        {            inputphoneno.setError("Write Your Phone...");            inputphoneno.requestFocus();        }        else if (inputpass.getText().toString().length()<4)        {            inputpass.setError("Password must greater than 4digit...");            inputpass.requestFocus();        }        else if (TextUtils.isEmpty(pass))        {            inputpass.setError("Write Your Password...");            inputpass.requestFocus();        }        else        {            Validatephoneno(name, phone, pass);        }    }    private void Validatephoneno(final String name, final String phone, final String pass)    {        final DatabaseReference RootRef;        RootRef= FirebaseDatabase.getInstance().getReference();        RootRef.keepSynced(true);        RootRef.addListenerForSingleValueEvent(new ValueEventListener()        {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot)            {                if(!(dataSnapshot.child("Users").child(phone).exists()))                {                    HashMap<String, Object> userdatamap=new HashMap<>();                    userdatamap.put("Phone",phone);                    userdatamap.put("Password",pass);                    userdatamap.put("Name",name);                    RootRef.child("Users"). child(phone).updateChildren(userdatamap)                    .addOnCompleteListener(new OnCompleteListener<Void>() {                        @Override                        public void onComplete(@NonNull Task<Void> task)                        {                    if(task.isSuccessful())                    {                        Toast.makeText(join_now_Activity.this, "Congrats...Your account has been created..", Toast.LENGTH_SHORT).show();                        loadingbar.dismiss();                        Go_to_Login_page();                    }                    else                    {                        loadingbar.dismiss();                        Toast.makeText(join_now_Activity.this, "Network error..Please try again!!", Toast.LENGTH_SHORT).show();                    }                        }                    });                }                else                {                    loadingbar.dismiss();                    Toast.makeText(join_now_Activity.this, "This "+phone+" Already Exist!!", Toast.LENGTH_LONG).show();                    Go_to_Main_page();                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void Go_to_Main_page()    {        Intent intent = new Intent(join_now_Activity.this,MainActivity.class);        startActivity(intent);    }    private void Go_to_Login_page()    {        Intent login_intent = new Intent(join_now_Activity.this,LoginActivity.class);        login_intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK|Intent.FLAG_ACTIVITY_CLEAR_TASK);        startActivity(login_intent);    }}